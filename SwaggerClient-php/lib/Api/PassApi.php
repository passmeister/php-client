<?php
/**
 * PassApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Demo Client for Passmeister Apple Wallet and Google Wallet API
 *
 * [www.passmeister.com](https://www.passmeister.com).
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.39
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * PassApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PassApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createOrUpdatePass
     *
     * This method creates or (if the pass id already exists) updates a pass, so you don't have to track ids and creation status of your passes.
     *
     * @param  object $pass_type_id your pass type id, for example P963493 (Urban Fitness) (required)
     * @param  object $pass_id id of the pass (provided by you when creating the pass or automatically set by passmeister) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function createOrUpdatePass($pass_type_id, $pass_id = null)
    {
        $this->createOrUpdatePassWithHttpInfo($pass_type_id, $pass_id);
    }

    /**
     * Operation createOrUpdatePassWithHttpInfo
     *
     * This method creates or (if the pass id already exists) updates a pass, so you don't have to track ids and creation status of your passes.
     *
     * @param  object $pass_type_id your pass type id, for example P963493 (Urban Fitness) (required)
     * @param  object $pass_id id of the pass (provided by you when creating the pass or automatically set by passmeister) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function createOrUpdatePassWithHttpInfo($pass_type_id, $pass_id = null)
    {
        $returnType = '';
        $request = $this->createOrUpdatePassRequest($pass_type_id, $pass_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation createOrUpdatePassAsync
     *
     * This method creates or (if the pass id already exists) updates a pass, so you don't have to track ids and creation status of your passes.
     *
     * @param  object $pass_type_id your pass type id, for example P963493 (Urban Fitness) (required)
     * @param  object $pass_id id of the pass (provided by you when creating the pass or automatically set by passmeister) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrUpdatePassAsync($pass_type_id, $pass_id = null)
    {
        return $this->createOrUpdatePassAsyncWithHttpInfo($pass_type_id, $pass_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createOrUpdatePassAsyncWithHttpInfo
     *
     * This method creates or (if the pass id already exists) updates a pass, so you don't have to track ids and creation status of your passes.
     *
     * @param  object $pass_type_id your pass type id, for example P963493 (Urban Fitness) (required)
     * @param  object $pass_id id of the pass (provided by you when creating the pass or automatically set by passmeister) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrUpdatePassAsyncWithHttpInfo($pass_type_id, $pass_id = null)
    {
        $returnType = '';
        $request = $this->createOrUpdatePassRequest($pass_type_id, $pass_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createOrUpdatePass'
     *
     * @param  object $pass_type_id your pass type id, for example P963493 (Urban Fitness) (required)
     * @param  object $pass_id id of the pass (provided by you when creating the pass or automatically set by passmeister) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createOrUpdatePassRequest($pass_type_id, $pass_id = null)
    {
        // verify the required parameter 'pass_type_id' is set
        if ($pass_type_id === null || (is_array($pass_type_id) && count($pass_type_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pass_type_id when calling createOrUpdatePass'
            );
        }

        $resourcePath = '/pass';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($pass_type_id !== null) {
            $queryParams['passTypeId'] = ObjectSerializer::toQueryValue($pass_type_id);
        }
        // query params
        if ($pass_id !== null) {
            $queryParams['passId'] = ObjectSerializer::toQueryValue($pass_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deletePass
     *
     * Delete pass by pass id.
     *
     * @param  object $pass_type_id your pass type id, for example P963493 (Urban Fitness) (required)
     * @param  object $pass_id id of the pass (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deletePass($pass_type_id, $pass_id)
    {
        $this->deletePassWithHttpInfo($pass_type_id, $pass_id);
    }

    /**
     * Operation deletePassWithHttpInfo
     *
     * Delete pass by pass id.
     *
     * @param  object $pass_type_id your pass type id, for example P963493 (Urban Fitness) (required)
     * @param  object $pass_id id of the pass (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePassWithHttpInfo($pass_type_id, $pass_id)
    {
        $returnType = '';
        $request = $this->deletePassRequest($pass_type_id, $pass_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deletePassAsync
     *
     * Delete pass by pass id.
     *
     * @param  object $pass_type_id your pass type id, for example P963493 (Urban Fitness) (required)
     * @param  object $pass_id id of the pass (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePassAsync($pass_type_id, $pass_id)
    {
        return $this->deletePassAsyncWithHttpInfo($pass_type_id, $pass_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deletePassAsyncWithHttpInfo
     *
     * Delete pass by pass id.
     *
     * @param  object $pass_type_id your pass type id, for example P963493 (Urban Fitness) (required)
     * @param  object $pass_id id of the pass (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePassAsyncWithHttpInfo($pass_type_id, $pass_id)
    {
        $returnType = '';
        $request = $this->deletePassRequest($pass_type_id, $pass_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deletePass'
     *
     * @param  object $pass_type_id your pass type id, for example P963493 (Urban Fitness) (required)
     * @param  object $pass_id id of the pass (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deletePassRequest($pass_type_id, $pass_id)
    {
        // verify the required parameter 'pass_type_id' is set
        if ($pass_type_id === null || (is_array($pass_type_id) && count($pass_type_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pass_type_id when calling deletePass'
            );
        }
        // verify the required parameter 'pass_id' is set
        if ($pass_id === null || (is_array($pass_id) && count($pass_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pass_id when calling deletePass'
            );
        }

        $resourcePath = '/pass';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($pass_type_id !== null) {
            $queryParams['passTypeId'] = ObjectSerializer::toQueryValue($pass_type_id);
        }
        // query params
        if ($pass_id !== null) {
            $queryParams['passId'] = ObjectSerializer::toQueryValue($pass_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPass
     *
     * Get pass information by pass id.
     *
     * @param  object $pass_type_id your pass type id, for example P963493 (Urban Fitness) (required)
     * @param  object $pass_id id of the pass (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getPass($pass_type_id, $pass_id)
    {
        $this->getPassWithHttpInfo($pass_type_id, $pass_id);
    }

    /**
     * Operation getPassWithHttpInfo
     *
     * Get pass information by pass id.
     *
     * @param  object $pass_type_id your pass type id, for example P963493 (Urban Fitness) (required)
     * @param  object $pass_id id of the pass (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPassWithHttpInfo($pass_type_id, $pass_id)
    {
        $returnType = '';
        $request = $this->getPassRequest($pass_type_id, $pass_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getPassAsync
     *
     * Get pass information by pass id.
     *
     * @param  object $pass_type_id your pass type id, for example P963493 (Urban Fitness) (required)
     * @param  object $pass_id id of the pass (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPassAsync($pass_type_id, $pass_id)
    {
        return $this->getPassAsyncWithHttpInfo($pass_type_id, $pass_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPassAsyncWithHttpInfo
     *
     * Get pass information by pass id.
     *
     * @param  object $pass_type_id your pass type id, for example P963493 (Urban Fitness) (required)
     * @param  object $pass_id id of the pass (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPassAsyncWithHttpInfo($pass_type_id, $pass_id)
    {
        $returnType = '';
        $request = $this->getPassRequest($pass_type_id, $pass_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPass'
     *
     * @param  object $pass_type_id your pass type id, for example P963493 (Urban Fitness) (required)
     * @param  object $pass_id id of the pass (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPassRequest($pass_type_id, $pass_id)
    {
        // verify the required parameter 'pass_type_id' is set
        if ($pass_type_id === null || (is_array($pass_type_id) && count($pass_type_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pass_type_id when calling getPass'
            );
        }
        // verify the required parameter 'pass_id' is set
        if ($pass_id === null || (is_array($pass_id) && count($pass_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pass_id when calling getPass'
            );
        }

        $resourcePath = '/pass';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($pass_type_id !== null) {
            $queryParams['passTypeId'] = ObjectSerializer::toQueryValue($pass_type_id);
        }
        // query params
        if ($pass_id !== null) {
            $queryParams['passId'] = ObjectSerializer::toQueryValue($pass_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation passList
     *
     * Retrieve the list of active pass ids for a given pass type.
     *
     * @param  object $pass_type_id your pass type id, for example P963493 (Urban Fitness) (required)
     * @param  object $page  (optional)
     * @param  object $limit  (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function passList($pass_type_id, $page = null, $limit = null)
    {
        $this->passListWithHttpInfo($pass_type_id, $page, $limit);
    }

    /**
     * Operation passListWithHttpInfo
     *
     * Retrieve the list of active pass ids for a given pass type.
     *
     * @param  object $pass_type_id your pass type id, for example P963493 (Urban Fitness) (required)
     * @param  object $page  (optional)
     * @param  object $limit  (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function passListWithHttpInfo($pass_type_id, $page = null, $limit = null)
    {
        $returnType = '';
        $request = $this->passListRequest($pass_type_id, $page, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation passListAsync
     *
     * Retrieve the list of active pass ids for a given pass type.
     *
     * @param  object $pass_type_id your pass type id, for example P963493 (Urban Fitness) (required)
     * @param  object $page  (optional)
     * @param  object $limit  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function passListAsync($pass_type_id, $page = null, $limit = null)
    {
        return $this->passListAsyncWithHttpInfo($pass_type_id, $page, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation passListAsyncWithHttpInfo
     *
     * Retrieve the list of active pass ids for a given pass type.
     *
     * @param  object $pass_type_id your pass type id, for example P963493 (Urban Fitness) (required)
     * @param  object $page  (optional)
     * @param  object $limit  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function passListAsyncWithHttpInfo($pass_type_id, $page = null, $limit = null)
    {
        $returnType = '';
        $request = $this->passListRequest($pass_type_id, $page, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'passList'
     *
     * @param  object $pass_type_id your pass type id, for example P963493 (Urban Fitness) (required)
     * @param  object $page  (optional)
     * @param  object $limit  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function passListRequest($pass_type_id, $page = null, $limit = null)
    {
        // verify the required parameter 'pass_type_id' is set
        if ($pass_type_id === null || (is_array($pass_type_id) && count($pass_type_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pass_type_id when calling passList'
            );
        }

        $resourcePath = '/pass/list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($pass_type_id !== null) {
            $queryParams['passTypeId'] = ObjectSerializer::toQueryValue($pass_type_id);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation passSync
     *
     * Send updates to all active passes for a given pass type.
     *
     * @param  object $pass_type_id your pass type id, for example P963493 (Urban Fitness) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function passSync($pass_type_id)
    {
        $this->passSyncWithHttpInfo($pass_type_id);
    }

    /**
     * Operation passSyncWithHttpInfo
     *
     * Send updates to all active passes for a given pass type.
     *
     * @param  object $pass_type_id your pass type id, for example P963493 (Urban Fitness) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function passSyncWithHttpInfo($pass_type_id)
    {
        $returnType = '';
        $request = $this->passSyncRequest($pass_type_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation passSyncAsync
     *
     * Send updates to all active passes for a given pass type.
     *
     * @param  object $pass_type_id your pass type id, for example P963493 (Urban Fitness) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function passSyncAsync($pass_type_id)
    {
        return $this->passSyncAsyncWithHttpInfo($pass_type_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation passSyncAsyncWithHttpInfo
     *
     * Send updates to all active passes for a given pass type.
     *
     * @param  object $pass_type_id your pass type id, for example P963493 (Urban Fitness) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function passSyncAsyncWithHttpInfo($pass_type_id)
    {
        $returnType = '';
        $request = $this->passSyncRequest($pass_type_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'passSync'
     *
     * @param  object $pass_type_id your pass type id, for example P963493 (Urban Fitness) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function passSyncRequest($pass_type_id)
    {
        // verify the required parameter 'pass_type_id' is set
        if ($pass_type_id === null || (is_array($pass_type_id) && count($pass_type_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pass_type_id when calling passSync'
            );
        }

        $resourcePath = '/pass/sync';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($pass_type_id !== null) {
            $queryParams['passTypeId'] = ObjectSerializer::toQueryValue($pass_type_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
